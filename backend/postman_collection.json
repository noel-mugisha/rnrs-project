{
  "info": {
    "name": "Job Portal API - Presentation Flow (Work Categories)",
    "description": "A step-by-step collection demonstrating the API with a focus on creating and applying for jobs from the predefined work categories.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4000/api/v1"
    },
    {
      "key": "jobSeekerEmail",
      "value": ""
    },
    {
      "key": "jobSeekerPassword",
      "value": "SeekerPass123!"
    },
    {
      "key": "jobSeekerUserId",
      "value": ""
    },
    {
      "key": "jobSeekerAccessToken",
      "value": ""
    },
    {
      "key": "jobProviderEmail",
      "value": ""
    },
    {
      "key": "jobProviderPassword",
      "value": "ProviderPass123!"
    },
    {
      "key": "jobProviderUserId",
      "value": ""
    },
    {
      "key": "jobProviderAccessToken",
      "value": ""
    },
    {
      "key": "employerId",
      "value": ""
    },
    {
      "key": "jobId",
      "value": ""
    },
    {
      "key": "resumeId",
      "value": ""
    },
    {
      "key": "sampleCategory",
      "value": "Farming"
    },
    {
      "key": "sampleWork",
      "value": "Rice planting"
    },
    {
      "key": "otp",
      "value": "123456"
    }
  ],
  "item": [
    {
      "name": "1. Setup: Get Work Categories",
      "item": [
        {
          "name": "Get Work Categories (Metadata)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains work categories data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql('success');",
                  "    pm.expect(response.data).to.be.an('array').with.length.above(0);",
                  "});",
                  "",
                  "// Capture a sample category and work for the entire collection to use",
                  "const response = pm.response.json();",
                  "if (response.data && response.data.length > 0) {",
                  "    const firstCategory = response.data[0];",
                  "    if (firstCategory.works && firstCategory.works.length > 0) {",
                  "        pm.collectionVariables.set(\"sampleCategory\", firstCategory.category);",
                  "        pm.collectionVariables.set(\"sampleWork\", firstCategory.works[0]);",
                  "        console.log(`Captured for demo: Category='${firstCategory.category}', Work='${firstCategory.works[0]}'`);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/meta/work-categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "meta",
                "work-categories"
              ]
            },
            "description": "First, we fetch the predefined list of jobs. The script saves the first job type (e.g., 'Farming in the swamp') to a variable to be used in later steps."
          },
          "response": []
        }
      ]
    },
    {
      "name": "2. Job Provider Journey",
      "item": [
        {
          "name": "Sign up as Job Provider",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const randomEmail = `provider_${Date.now()}@example.com`;",
                  "pm.collectionVariables.set(\"jobProviderEmail\", randomEmail);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 Created\", () => pm.response.to.have.status(201));",
                  "const response = pm.response.json();",
                  "pm.test(\"User ID received\", () => pm.expect(response.data).to.have.property('userId'));",
                  "pm.collectionVariables.set(\"jobProviderUserId\", response.data.userId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Agro\",\n  \"lastName\": \"Corp\",\n  \"email\": \"{{jobProviderEmail}}\",\n  \"password\": \"{{jobProviderPassword}}\",\n  \"role\": \"JOBPROVIDER\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/signup",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "signup"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify Email (Job Provider)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", () => pm.response.to.have.status(200));",
                  "const response = pm.response.json();",
                  "pm.test(\"Access token received\", () => pm.expect(response.data).to.have.property('accessToken'));",
                  "pm.collectionVariables.set(\"jobProviderAccessToken\", response.data.accessToken);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{jobProviderUserId}}\",\n  \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-email-otp",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "verify-email-otp"
              ]
            },
            "description": "NOTE: Your backend generates a real OTP. For this test, you must either check your logs/database for the OTP or temporarily hardcode it to '123456' for the demo."
          },
          "response": []
        },
        {
          "name": "Create Employer Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 Created\", () => pm.response.to.have.status(201));",
                  "const response = pm.response.json();",
                  "pm.test(\"Employer ID received\", () => pm.expect(response.data).to.have.property('id'));",
                  "pm.collectionVariables.set(\"employerId\", response.data.id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jobProviderAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Kigali Farming Collective\",\n  \"website\": \"https://kigalifarming.rw\",\n  \"industry\": \"Agriculture\",\n  \"location\": \"Kigali, Rwanda\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/employers",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "employers"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create a New Job (Using Metadata)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 Created\", () => pm.response.to.have.status(201));",
                  "const response = pm.response.json();",
                  "pm.test(\"Job ID received\", () => pm.expect(response.data).to.have.property('id'));",
                  "pm.test(\"Job title matches the sample work\", () => pm.expect(response.data.title).to.eql(pm.collectionVariables.get('sampleWork')));",
                  "pm.collectionVariables.set(\"jobId\", response.data.id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jobProviderAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"{{sampleWork}}\",\n  \"description\": \"We are hiring skilled individuals for a seasonal '{{sampleWork}}' project. Must be hardworking and able to work outdoors. This is a great opportunity to contribute to our local food supply.\",\n  \"responsibilities\": [\n    \"Perform all tasks related to {{sampleWork}}.\",\n    \"Maintain equipment and tools.\",\n    \"Follow safety guidelines and procedures.\"\n  ],\n  \"requirements\": [\n    \"Previous experience in {{sampleCategory}} is preferred but not required.\",\n    \"Must be physically fit and able to lift 20kg.\",\n    \"Strong work ethic and reliability.\"\n  ],\n  \"location\": \"Gasabo District, Kigali\",\n  \"remote\": false,\n  \"jobType\": \"CONTRACT\",\n  \"experienceLevel\": \"ENTRY\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/employers/{{employerId}}/jobs",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "employers",
                "{{employerId}}",
                "jobs"
              ]
            },
            "description": "This request dynamically creates a job using the `title` captured from the metadata endpoint."
          },
          "response": []
        },
        {
          "name": "Publish the Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", () => pm.response.to.have.status(200));",
                  "const response = pm.response.json();",
                  "pm.test(\"Job status is PUBLISHED\", () => pm.expect(response.data.status).to.eql(\"PUBLISHED\"));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jobProviderAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/jobs/{{jobId}}/publish",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "jobs",
                "{{jobId}}",
                "publish"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "3. Job Seeker Journey",
      "item": [
        {
          "name": "Sign up as Job Seeker",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const randomEmail = `seeker_${Date.now()}@example.com`;",
                  "pm.collectionVariables.set(\"jobSeekerEmail\", randomEmail);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 Created\", () => pm.response.to.have.status(201));",
                  "const response = pm.response.json();",
                  "pm.test(\"User ID received\", () => pm.expect(response.data).to.have.property('userId'));",
                  "pm.collectionVariables.set(\"jobSeekerUserId\", response.data.userId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Worker\",\n  \"email\": \"{{jobSeekerEmail}}\",\n  \"password\": \"{{jobSeekerPassword}}\",\n  \"role\": \"JOBSEEKER\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/signup",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "signup"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify Email (Job Seeker)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", () => pm.response.to.have.status(200));",
                  "const response = pm.response.json();",
                  "pm.test(\"Access token received\", () => pm.expect(response.data).to.have.property('accessToken'));",
                  "pm.collectionVariables.set(\"jobSeekerAccessToken\", response.data.accessToken);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"{{jobSeekerUserId}}\",\n  \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-email-otp",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "verify-email-otp"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Profile with Matching Skills",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jobSeekerAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phone\": \"+250788123456\",\n  \"desiredTitle\": \"{{sampleWork}}\",\n  \"about\": \"Hardworking individual with experience in {{sampleCategory}}.\",\n  \"skills\": [\n    {\n      \"category\": \"{{sampleCategory}}\",\n      \"work\": \"{{sampleWork}}\"\n    }\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/me",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "me"
              ]
            },
            "description": "This request updates the seeker's profile with the skills that match the job created by the provider."
          },
          "response": []
        },
        {
          "name": "Upload Resume (Step 1: Request Upload URL)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", () => pm.response.to.have.status(200));",
                  "const response = pm.response.json();",
                  "pm.test(\"Resume ID received\", () => pm.expect(response.data).to.have.property('resumeId'));",
                  "pm.collectionVariables.set(\"resumeId\", response.data.resumeId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jobSeekerAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fileName\": \"John_Worker_CV.pdf\",\n  \"fileType\": \"application/pdf\",\n  \"fileSize\": 102400\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/resumes/request-upload",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "resumes",
                "request-upload"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Upload Resume (Step 2: Complete Upload)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 Created\", () => pm.response.to.have.status(201));",
                  "const response = pm.response.json();",
                  "pm.test(\"Upload confirmed\", () => pm.expect(response.data.success).to.be.true);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jobSeekerAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"resumeId\": \"{{resumeId}}\",\n  \"storageKey\": \"job-portal/resumes/{{resumeId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/resumes/complete-upload",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "resumes",
                "complete-upload"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Search for the Job (Using Metadata)",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/jobs/search?q={{sampleWork}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "jobs",
                "search"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "{{sampleWork}}"
                }
              ]
            },
            "description": "The seeker searches for the specific job type and finds the one posted by the provider."
          },
          "response": []
        },
        {
          "name": "Apply to the Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 Created\", () => pm.response.to.have.status(201));",
                  "const response = pm.response.json();",
                  "pm.test(\"Application ID received\", () => pm.expect(response.data).to.have.property('applicationId'));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jobSeekerAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Idempotency-Key",
                "value": "{{$guid}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"resumeId\": \"{{resumeId}}\",\n  \"coverLetter\": \"I am very interested in the {{sampleWork}} position. I am a reliable and hardworking individual ready to start immediately.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/applications/jobs/{{jobId}}/apply",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "applications",
                "jobs",
                "{{jobId}}",
                "apply"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "4. Finalizing the Loop (Job Provider)",
      "item": [
        {
          "name": "View Applicants for the Job",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", () => pm.response.to.have.status(200));",
                  "const response = pm.response.json();",
                  "pm.test(\"Application from seeker is present\", () => {",
                  "    const application = response.data.applications[0];",
                  "    pm.expect(application.jobSeeker.user.email).to.eql(pm.collectionVariables.get('jobSeekerEmail'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{jobProviderAccessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/jobs/{{jobId}}/applicants",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "jobs",
                "{{jobId}}",
                "applicants"
              ]
            },
            "description": "As the job provider, we can now see that John Worker has applied to our job."
          },
          "response": []
        }
      ]
    }
  ]
}